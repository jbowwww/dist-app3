
181207
Next step! - implement event/document create/update/check events as noted in model/plugin/timestamp.js (best place to do it):
Actually - implement in standard.js - this is where it explicitly already calculates a var actionType (althgouh timestamps practivally does it again as well)
		/* `181207: New idea: at this point the plugin emits an event on the model (i think it is alreaaay an Eventemitter) and 
		/& the document (also an EE i think, or make it one) named either create, update or check.
		 * Other schemas can listen fofr these events on a model or on specific documents without having to use schema middleware directly 
		 * Allows for eg/ : files can listen for their own creation/updates and (re)calculate hash as appropriate
		 * 	: audio can listen for file creaete/update and load metadata appropriately
		 * Seems generic enough for what ineed?? */

		 
181201
Some notes / thoughts on plan / roadmap / mudmap

- Plugins could do with rationalising / condensing / reorganising (e.g. i think stat should be in standard, not sure about bulk save??)

- custom-hooks.js plugin works well, and using post('construct') seems quite useful for populating fields
	- Issue with concurrency - same Dir can be created >once because multiple files exist in it/reference it by findOrCreate, causing index exception on the unique path field
	- Ultimately, populating the dir/disk/etc fields of fs/file/dir and disk in drive, could possibly get a little messy, in the case where file system entries get moved and their containing directories/disk/etc change or otherwise become inaccurate.
		- Instead of trying to maintain these references, why not make those fields virtual on the schema, and populate them on find/create/whatever? e.g. containing directory of a file or dir can be populated by matching dir.path == nodeFs.dirname(fs.path), fs.drive can be populated by fs.path.startsWith(drive.mountpoint) (must either retrieve entire drive collection) and sort by length, or could try using a drive.find({$where:...}) query

181021
Some notes on mongoose middleware

pre, on, and post 'init' are fired when documents are initialised from the DB (mongoose.DOcument.prototype.init, i think)
	pre receives, as an argument, the POJO data being used to initialise the document. its typeof is 'object'
	on and post 'init' take the constructed mongoose document as an argument.
	Both the POJO and the document have an id since it was initialised from the DB
	The document instance will have isNew == false and isModified == false
	Appears that it is triggered on find() calls also
	
pre, on and post 'validate' are fired when document.validate() is called
	document.save() has a pre middleware that calls validate().
		If validation throws an error save() is aborted (I think)
	I have done the same in my implementation of bulkSave() for some consistency
		I am trying to stick with using this bulkSave() for efficiency
		If a document is a newly created instance (ie not from the database) it will have
			doc.isNew == true
			no _id until the document is saved in the datbase (i think - confirm this)
